<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/css/style.css">
    <title>ToDo's Express</title>
</head>

<body id="index-body">
    <h1>Welcome to ToDo's Express!</h1>

    <div id="buttons">
        <button onclick="location.href='/todos'">ToDos</button>
        <button onclick="location.href='/login'">Login</button>
        <button onclick="location.href='/register'">Register</button>
    </div>

    <h2 id="h2-index-changelog">Changelog</h2>

    <p id="p-index-changelog">

        ✅ Added a change log to the index file ( nothing more than the commits ) / Removed the add_todo and remove_todo
        buttons, it`s now an input that requires the text ( Title for the add todo, Title for the remove todo ) /
        Removed the description for the todos ( i didn't like the idea ) / No known bugs / Need to recheck for the
        style.css file for unused styles / Need to make sure there is no bugs ( because of the drastic change of the
        todos ) / Removed the get /add_todo and /remove_todo, since it`s now directly to the post method / Passed the
        todos list countdown to bellow the add_todo and remove_todo inputs. <br>
        ✅ Implemented the css. <br>
        ✅ Implemented the css on the Login and Register pages. <br>
        ✅ Css added to the index page. <br>
        ✅ Code Refactored!. <br>
        ✅ Added a todo tree / Starting to refactor the whole code / Few implementations to come. <br>
        ✅ Changed the name of a function inside the database file / Working alfa of the todo implementation / ToDo is
        working 100 % / Implementation was a success. <br>
        ✅ Small change in the todos.js file. <br>
        ✅ Working demo of the todo implementation / Add todo function added / Remove todo function added / Paths and
        views for the corresponding files added / Implemented GetTodoByUserID and removeToDoByTitle / Added a todo.md to
        help understand the functionality. <br>
        ✅ Commented some parts of the code / Improved readability and understanding of the code. <br>
        ✅ Refactored all the code ( Still needs some comments about some functions ) / Fixed the bug where the database
        got called way to much / Fixed a lot of bugs / Refactored all the code. <br>
        ✅ Remove the passport parameter from the passport-config file / passport is now directly imported from the file
        / Removed a bug from the register page -> The database now has a check if statement, that make sure the client
        is not connected before trying to connect / Inside the connect from the database, there is a check (
        client.isConnected() ) to make sure the database does not try to connect to the client, when the client is
        already connected. <br>
        ✅ Fixed a small bug on the register page ( the await database.connect() was commented out ). <br>
        ✅ Changed the position of the database.connect function on the server file / Added a console.log to the
        database.connect function inside the database file. <br>
        ✅ Few changes to the code / Database completely integrated / Database switch was a success. <br>
        ✅ Final methods added / Fixed a whole bunch of small bugs in the passport with the new db / Database class still
        needs the ToDos functions / Working demo done / Transition between databases done / Merging branches. <br>
        ✅ Try Catch block added to the insert function / getUsers() and getUserByEmail added. <br>
        ✅ addTodo() functionality added to the insert function. <br>
        ✅ Insert function added / One functionality ( add user ) is done / Insert will be used by both addUser() and
        addTodo(). <br>
        ✅ Removed mysql package / Added ATLAS_URI inside the .env / Starting to change the database from mysql to
        mongodb. <br>
        ✅ Incorrect credentials route added / It is very handy when using the failure redirect on the login file / Going
        for a big change ( Trying to use mongodb ). <br>
        ✅ Code refactored for the authentication / The code is 100 % Working as it should be / All the functionalities
        of authentication are added and there are no known bugs / Create an utils/auth.js file that handles the
        checkAuth and checkNotAuth for the user, added the checkAuth and checkNotAuth for all the routes, on both get
        and post / Created an index page / User session is working wonderfully, the user can leave the website and it
        will not log out, and if the user is logged in, it cannot access the /register, /login, /todos routes. <br>
        ✅ Refactoring the code for the authentication. <br>
        ✅ Finally a working demo / All the functionalities I need are 100 % working / If the user is not logged in, and
        try to go to /todos, it gets redirected to /login, if the user is logged in, and try to go /register or /login,
        it gets redirected to /todos. <br>
        ✅ Code has to be changed in order to work in the needed way / Starting tests with passport.js ( again ), but now
        following several tutorials, in some cases, i will even recreate a project from scratch to do the exact same
        project. <br>
        ✅ Not working / code looks to be okay / Dependencies added. <br>
        ✅ Authentication file done. <br>
        ✅ Removed unnecessary code from the server file and from the login file. <br>
        ✅ Starting to work on the authentication part ( if the user is already logged in, it should not be able to got
        to the /login or /register, and if the user is not logged in, it should not be able to got to the /todos ). <br>
        ✅ Small bug in the register file, when checking for the email in the database, if found, it means the user
        already registered that email in the site, it then shows an error screen, but i forgot the return statement, and
        was still being pushed to the database. Now i added the return statement, and if the email has already been
        registered it does not add it to the database;. <br>
        ✅ Header bug fixed ( The bug apparently occurs when res.send / res.render / res.redirect is called twice in the
        same loop ), fixed adding return statements to the function. <br>
        ✅ Initial commit of the bug fix. <br>
        ✅ The login system is working / The user can now login to it's account and if the credentials are wrong, it
        will specify which one / There is a "bug" though that it is saying: [200~Error [ERR_HTTP_HEADERS_SENT]: Cannot
        set headers after they are sent to the client~ - Trying to debug it and fix it. <br>
        ✅ Working alfa ( the login recognizes the wrong password, but does not recognize a wrong email ). <br>
        ✅ Some files need to be change ( The login is not working ). <br>
        ✅ Router Login.js Done!. <br>
        ✅ Login.js changed module to check for the password. <br>
        ✅ Router added to the login.js file, added error.ejs and incorrect-credentials.ejs. <br>
        ✅ Few files added / Database added / Static folder ( public ) added / Css addded to the register.ejs file /
        Created the routes, utils, views folders. <br>
    </p>
</body>

</html>